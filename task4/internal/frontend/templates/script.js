class ImageProcessor {
    constructor() {
        this.baseUrl = window.location.origin;
        this.images = [];
        this.currentImageId = null;
        
        this.initializeEventListeners();
        this.loadImages();
    }

    initializeEventListeners() {
        // –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('uploadForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.uploadImage();
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.querySelector('.close').addEventListener('click', () => {
            this.closeModal();
        });

        document.getElementById('downloadBtn').addEventListener('click', () => {
            this.downloadImage();
        });

        document.getElementById('deleteModalBtn').addEventListener('click', () => {
            this.deleteImage(this.currentImageId);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        window.addEventListener('click', (e) => {
            const modal = document.getElementById('imageModal');
            if (e.target === modal) {
                this.closeModal();
            }
        });
    }

    async uploadImage() {
        const formData = new FormData(document.getElementById('uploadForm'));
        const uploadBtn = document.getElementById('uploadBtn');
        
        try {
            uploadBtn.disabled = true;
            uploadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';

            const response = await fetch(`${this.baseUrl}/upload`, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                this.showAlert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!', 'success');
                this.addImageToList(result);
                document.getElementById('uploadForm').reset();
            } else {
                const error = await response.json();
                throw new Error(error.details || error.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
            }
        } catch (error) {
            this.showAlert(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
            console.error('Upload error:', error);
        } finally {
            uploadBtn.disabled = false;
            uploadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å';
        }
    }

    async loadImages() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        // –ü–æ—Å–∫–æ–ª—å–∫—É –µ–≥–æ –Ω–µ—Ç, –º—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å images –≤ localStorage
        const savedImages = localStorage.getItem('processedImages');
        if (savedImages) {
            this.images = JSON.parse(savedImages);
            this.renderImages();
        }
    }

    addImageToList(imageData) {
        const image = {
            id: imageData.image_id,
            originalName: 'uploaded_image',
            status: 'processing',
            uploadedAt: new Date().toISOString(),
            metadata: imageData
        };

        this.images.unshift(image);
        this.saveImages();
        this.renderImages();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.pollImageStatus(image.id);
    }

    async pollImageStatus(imageId) {
        const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 —Å–µ–∫—É–Ω–¥
        let attempts = 0;

        const checkStatus = async () => {
            if (attempts >= maxAttempts) {
                this.updateImageStatus(imageId, 'failed');
                return;
            }

            try {
                const response = await fetch(`${this.baseUrl}/image/${imageId}`);
                
                if (response.status === 404) {
                    this.updateImageStatus(imageId, 'failed');
                    return;
                }

                if (response.headers.get('content-type')?.includes('application/json')) {
                    const data = await response.json();
                    if (data.status === 'completed') {
                        this.updateImageStatus(imageId, 'completed', data.metadata);
                    } else if (data.status === 'processing') {
                        attempts++;
                        setTimeout(checkStatus, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    }
                } else {
                    // –ü–æ–ª—É—á–∏–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
                    this.updateImageStatus(imageId, 'completed');
                }
            } catch (error) {
                console.error('Status poll error:', error);
                attempts++;
                setTimeout(checkStatus, 5000);
            }
        };

        checkStatus();
    }

    updateImageStatus(imageId, status, metadata = null) {
        const imageIndex = this.images.findIndex(img => img.id === imageId);
        if (imageIndex !== -1) {
            this.images[imageIndex].status = status;
            if (metadata) {
                this.images[imageIndex].metadata = metadata;
            }
            this.saveImages();
            this.renderImages();
        }
    }

    async viewImage(imageId) {
        this.currentImageId = imageId;
        
        try {
            const response = await fetch(`${this.baseUrl}/image/${imageId}`);
            
            if (response.ok) {
                if (response.headers.get('content-type')?.includes('application/json')) {
                    const data = await response.json();
                    if (data.status === 'processing') {
                        this.showAlert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...', 'info');
                        return;
                    }
                } else {
                    // –≠—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const blob = await response.blob();
                    const url = URL.createObjectURL(blob);
                    
                    document.getElementById('modalImage').src = url;
                    document.getElementById('imageModal').style.display = 'block';
                }
            }
        } catch (error) {
            this.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            console.error('View image error:', error);
        }
    }

    async deleteImage(imageId) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?')) return;

        try {
            const response = await fetch(`${this.baseUrl}/image/${imageId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.images = this.images.filter(img => img.id !== imageId);
                this.saveImages();
                this.renderImages();
                this.closeModal();
                this.showAlert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
            }
        } catch (error) {
            this.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            console.error('Delete error:', error);
        }
    }

    downloadImage() {
        const imageUrl = document.getElementById('modalImage').src;
        const link = document.createElement('a');
        link.href = imageUrl;
        link.download = `processed-${this.currentImageId}`;
        link.click();
    }

    closeModal() {
        document.getElementById('imageModal').style.display = 'none';
        this.currentImageId = null;
    }

    renderImages() {
        const container = document.getElementById('imagesList');
        const emptyState = document.getElementById('emptyState');

        if (this.images.length === 0) {
            emptyState.style.display = 'block';
            container.innerHTML = '';
            return;
        }

        emptyState.style.display = 'none';
        container.innerHTML = this.images.map(image => `
            <div class="image-card">
                <div class="image-preview">
                    ${image.status === 'completed' ? 
                        `<img src="${this.baseUrl}/image/${image.id}" alt="Processed image" onerror="this.style.display='none'">` : 
                        `<div class="placeholder">üñºÔ∏è</div>`
                    }
                </div>
                <div class="image-info">
                    <h3 title="${image.id}">${image.id.substring(0, 20)}...</h3>
                    <span class="status status-${image.status}">
                        ${this.getStatusText(image.status)}
                    </span>
                    <div class="image-actions">
                        <button class="btn-view" onclick="app.viewImage('${image.id}')" 
                                ${image.status !== 'completed' ? 'disabled' : ''}>
                            –ü—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                        <button class="btn-delete" onclick="app.deleteImage('${image.id}')">
                            –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `).join('');
    }

    getStatusText(status) {
        const statusMap = {
            'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'completed': '–ì–æ—Ç–æ–≤–æ',
            'failed': '–û—à–∏–±–∫–∞'
        };
        return statusMap[status] || status;
    }

    saveImages() {
        localStorage.setItem('processedImages', JSON.stringify(this.images));
    }

    showAlert(message, type) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
        
        document.body.appendChild(alert);
        
        setTimeout(() => {
            alert.remove();
        }, 3000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new ImageProcessor();